name: Deploy Real Estate Scraper

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    env:
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SERVER_USER: ${{ secrets.SERVER_USER }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_PORT: ${{ secrets.DB_PORT }}
      REQUEST_DELAY: ${{ secrets.REQUEST_DELAY }}
      MAX_RETRIES: ${{ secrets.MAX_RETRIES }}
      LOGGING_LEVEL: ${{ secrets.LOGGING_LEVEL }}
      SCRAPER_PAGES: ${{ secrets.SCRAPER_PAGES }}
      PROXY_USERNAME: ${{ secrets.PROXY_USERNAME }}
      PROXY_PASSWORD: ${{ secrets.PROXY_PASSWORD }}
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install SSH key
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H "${{ secrets.SERVER_IP }}" >> ~/.ssh/known_hosts

      - name: Create Directory Structure
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} '
            sudo mkdir -p /var/www/scraper/logs
            sudo chown -R "${USER}:${USER}" /var/www/scraper
          '

      - name: Backup Existing Environment
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} '
            cd /var/www/scraper || exit 1
            if [ -d "venv" ]; then
              mv venv venv_backup
            fi
            rm -rf ./*
            if [ -d "venv_backup" ]; then
              mv venv_backup venv
            fi
          '

      - name: Setup Supervisor
        run: |
          SUPERVISOR_CONFIG="[program:realestate_scraper]
          command=/var/www/scraper/venv/bin/python /var/www/scraper/main.py
          directory=/var/www/scraper
          user=${USER}
          autostart=true
          autorestart=true
          startretries=3
          startsecs=10
          redirect_stderr=true
          stdout_logfile=/var/www/scraper/logs/supervisor.log
          stderr_logfile=/var/www/scraper/logs/supervisor.err.log
          environment=PYTHONPATH=/var/www/scraper,PYTHONUNBUFFERED=1"

          ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} '
            sudo supervisorctl stop all 2>/dev/null || true
            sudo systemctl stop supervisord 2>/dev/null || true
            sudo pkill supervisord 2>/dev/null || true
            sudo rm -f /etc/supervisord.d/*.ini

            echo "'"$SUPERVISOR_CONFIG"'" | sudo tee /etc/supervisord.d/realestate_scraper.ini

            if ! grep -q "^\[include\]" /etc/supervisord.conf; then
              echo -e "\n[include]\nfiles = /etc/supervisord.d/*.ini" | sudo tee -a /etc/supervisord.conf
            fi
          '

      - name: Deploy Application Files
        run: |
          cat > .env << EOL
          DB_NAME=${{ secrets.DB_NAME }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_PORT=${{ secrets.DB_PORT }}
          REQUEST_DELAY=${{ secrets.REQUEST_DELAY }}
          MAX_RETRIES=${{ secrets.MAX_RETRIES }}
          LOGGING_LEVEL=${{ secrets.LOGGING_LEVEL }}
          SCRAPER_PAGES=${{ secrets.SCRAPER_PAGES }}
          PROXY_USERNAME=${{ secrets.PROXY_USERNAME }}
          PROXY_PASSWORD=${{ secrets.PROXY_PASSWORD }}
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}
          EOL

          tar -czf deploy.tar.gz \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='*.pyc' \
            --exclude='__pycache__' \
            main.py utils.py proxy_handler.py \
            telegram_reporter.py requirements.txt .env scrapers/

          scp -i ~/.ssh/deploy_key deploy.tar.gz ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/var/www/scraper/

      - name: Install and Configure
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} '
            cd /var/www/scraper || exit 1
            tar xzf deploy.tar.gz
            rm -f deploy.tar.gz
            chmod 600 .env

            if [ ! -d "venv" ]; then
              python3 -m venv venv
              source venv/bin/activate
              pip install --upgrade pip
              pip install -r requirements.txt
              deactivate
            fi

            sudo chown -R "$(id -u):$(id -g)" /var/www/scraper
            sudo chmod -R 755 /var/www/scraper
            sudo chmod 600 /var/www/scraper/.env
          '

      - name: Start Services
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} '
            sudo systemctl enable supervisord || true
            sudo systemctl restart supervisord
            sleep 5
            sudo supervisorctl reread
            sudo supervisorctl update
            sudo supervisorctl restart realestate_scraper
            sudo supervisorctl status realestate_scraper
          '