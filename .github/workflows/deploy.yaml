name: Deploy Real Estate Scraper

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    env:
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SERVER_USER: ${{ secrets.SERVER_USER }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_PORT: ${{ secrets.DB_PORT }}
      REQUEST_DELAY: ${{ secrets.REQUEST_DELAY }}
      MAX_RETRIES: ${{ secrets.MAX_RETRIES }}
      LOGGING_LEVEL: ${{ secrets.LOGGING_LEVEL }}
      SCRAPER_PAGES: ${{ secrets.SCRAPER_PAGES }}
      PROXY_USERNAME: ${{ secrets.PROXY_USERNAME }}
      PROXY_PASSWORD: ${{ secrets.PROXY_PASSWORD }}
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install SSH key
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H "${{ secrets.SERVER_IP }}" >> ~/.ssh/known_hosts

      - name: Install Required Packages
        run: |
          set -e  # Exit on any error
          echo "Installing required packages..."
          ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} '
            set -e  # Exit on any error
            echo "Updating package lists..."
            sudo yum update -y || { echo "Failed to update packages"; exit 1; }
            echo "Installing Python and Supervisor packages..."
            sudo yum install -y python3-pip python3-devel gcc supervisor || { echo "Failed to install required packages"; exit 1; }
            echo "Enabling supervisord service..."
            sudo systemctl enable supervisord || { echo "Failed to enable supervisord"; exit 1; }
          ' || { echo "Failed to execute remote commands"; exit 1; }

      - name: Configure Supervisord
        run: |
          CONFIG="[unix_http_server]
          file=/run/supervisor/supervisor.sock
          chmod=0700

          [supervisord]
          logfile=/var/log/supervisor/supervisord.log
          pidfile=/var/run/supervisord.pid
          childlogdir=/var/log/supervisor

          [rpcinterface:supervisor]
          supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

          [supervisorctl]
          serverurl=unix:///run/supervisor/supervisor.sock

          [include]
          files = /etc/supervisord.d/*.ini"

          ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "sudo mkdir -p /etc/supervisord.d /var/log/supervisor /run/supervisor && if [ ! -f /etc/supervisord.conf ]; then echo \"$CONFIG\" | sudo tee /etc/supervisord.conf; fi"

      - name: Create Directory Structure
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} '
            sudo mkdir -p /var/www/scraper/logs
            sudo chown -R ${USER}:${USER} /var/www/scraper
          '

      - name: Deploy Application Files
        run: |
          # Create environment file
          cat > .env << EOL
          DB_NAME=${{ secrets.DB_NAME }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_PORT=${{ secrets.DB_PORT }}
          REQUEST_DELAY=${{ secrets.REQUEST_DELAY }}
          MAX_RETRIES=${{ secrets.MAX_RETRIES }}
          LOGGING_LEVEL=${{ secrets.LOGGING_LEVEL }}
          SCRAPER_PAGES=${{ secrets.SCRAPER_PAGES }}
          PROXY_USERNAME=${{ secrets.PROXY_USERNAME }}
          PROXY_PASSWORD=${{ secrets.PROXY_PASSWORD }}
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}
          EOL

          # Create supervisor config with correct user
          ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} 'whoami' > server_user.txt
          SERVER_USER=$(cat server_user.txt)
          
          cat > realestate_scraper.ini << EOL
          [program:realestate_scraper]
          command=/var/www/scraper/venv/bin/python /var/www/scraper/main.py
          directory=/var/www/scraper
          user=${SERVER_USER}
          autostart=true
          autorestart=true
          startretries=3
          startsecs=10
          redirect_stderr=true
          stdout_logfile=/var/www/scraper/logs/supervisor.log
          stderr_logfile=/var/www/scraper/logs/supervisor.err.log
          environment=PYTHONPATH=/var/www/scraper,PYTHONUNBUFFERED=1
          EOL

          # Create deployment archive
          tar -czf deploy.tar.gz \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='*.pyc' \
            --exclude='__pycache__' \
            main.py utils.py proxy_handler.py \
            telegram_reporter.py requirements.txt .env \
            realestate_scraper.ini scrapers/

          # Copy files to server
          scp -i ~/.ssh/deploy_key deploy.tar.gz ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/var/www/scraper/

      - name: Install and Configure
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} '
            cd /var/www/scraper
            tar xzf deploy.tar.gz
            rm -f deploy.tar.gz
            chmod 600 .env

            # Setup Python virtual environment
            python3 -m venv venv
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
            deactivate

            # Move supervisor config
            sudo mv realestate_scraper.ini /etc/supervisord.d/
            sudo chmod 644 /etc/supervisord.d/realestate_scraper.ini

            # Set permissions
            sudo chown -R ${USER}:${USER} /var/www/scraper
            sudo chmod -R 755 /var/www/scraper
            sudo chmod 600 /var/www/scraper/.env
          '

      - name: Start Services
        run: |
          set -e  # Exit on any error
          echo "Starting services..."
          ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} '
            set -e  # Exit on any error
            
            echo "Creating supervisor directories..."
            sudo mkdir -p /run/supervisor
            sudo chmod 755 /run/supervisor
            
            echo "Stopping existing supervisord process if running..."
            sudo pkill supervisord || true
            sleep 2
            
            echo "Checking supervisor config permissions..."
            ls -l /etc/supervisord.conf
            ls -l /etc/supervisord.d/
            
            echo "Starting supervisord..."
            sudo /usr/bin/supervisord -c /etc/supervisord.conf -n || { echo "Failed to start supervisord"; exit 1; }
            sleep 5
            
            echo "Checking supervisord status..."
            sudo systemctl status supervisord --no-pager || { echo "Supervisord not running"; exit 1; }
            
            echo "Checking supervisord logs..."
            sudo tail -n 50 /var/log/supervisor/supervisord.log
            
            echo "Updating supervisor configuration..."
            sudo supervisorctl reread || { echo "Failed to reread supervisor config"; exit 1; }
            sudo supervisorctl update || { echo "Failed to update supervisor config"; exit 1; }
            
            echo "Starting scraper application..."
            sudo supervisorctl restart realestate_scraper || { echo "Failed to restart scraper"; exit 1; }
            
            echo "Checking application status..."
            status=$(sudo supervisorctl status realestate_scraper)
            echo "$status"
            if ! echo "$status" | grep -q "RUNNING"; then
              echo "Application failed to start properly"
              echo "Checking application logs..."
              sudo tail -n 50 /var/www/scraper/logs/supervisor.log
              exit 1
            fi
          ' || { echo "Failed to execute remote commands"; exit 1; }